using System.Collections.Generic;
using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

namespace Kayac
{
	public class ObjFileWriter
	{
		public static string ToText(Mesh mesh, int subMeshIndex)
		{
			return ToText(mesh.vertices, mesh.uv, mesh.normals, mesh.GetIndices(subMeshIndex));
		}

		public static string ToText(
			IList<Vector3> positions,
			IList<Vector2> uvs,
			IList<Vector3> normals,
			IList<int> indices)
		{
			var sb = new System.Text.StringBuilder();
			Debug.Assert(positions != null);
			sb.AppendFormat("Generated by Kayac.ObjFileWriter. {0} vertices, {1} faces.\n", positions.Count, indices.Count / 3);
			sb.AppendLine("# positions");
			foreach (var item in positions)
			{
				sb.AppendFormat("v {0} {1} {2}\n",
					item.x.ToString("F8"),
					item.y.ToString("F8"),
					item.z.ToString("F8"));
			}

			if (uvs != null)
			{
				Debug.Assert(uvs.Count == positions.Count);
				sb.AppendLine("\n# texcoords");
				foreach (var item in uvs)
				{
					sb.AppendFormat("vt {0} {1}\n",
						item.x.ToString("F8"),
						item.y.ToString("F8"));
				}
			}

			Debug.Assert(normals != null);
			sb.AppendLine("\n# normals");
			foreach (var item in normals)
			{
				sb.AppendFormat("vn {0} {1} {2}\n",
					item.x.ToString("F8"),
					item.y.ToString("F8"),
					item.z.ToString("F8"));
			}

			Debug.Assert(indices != null);
			Debug.Assert((indices.Count % 3) == 0);
			sb.AppendLine("\n# triangle faces");
			for (var i = 0; i < indices.Count; i += 3)
			{
				var i0 = indices[i + 0] + 1; // 1 based index.
				var i1 = indices[i + 1] + 1;
				var i2 = indices[i + 2] + 1;
				if (uvs != null)
				{
					sb.AppendFormat("f {0}/{0}/{0} {1}/{1}/{1} {2}/{2}/{2}\n",
						i0,
						i1,
						i2);
				}
				else
				{
					sb.AppendFormat("f {0}//{0} {1}//{1} {2}//{2}\n",
						i0,
						i1,
						i2);
				}
			}
			return sb.ToString();
		}
#if UNITY_EDITOR
		[MenuItem("Assets/Save .Obj File")]
		public static void Save()
		{
			var selected = Selection.activeObject;
			var mesh = selected as Mesh;
			if (mesh == null)
			{
				Debug.LogError("selected object is not mesh. type=" + selected.GetType().Name);
				return;
			}
			var originalPath = AssetDatabase.GetAssetPath(mesh);
			var dir = System.IO.Path.GetDirectoryName(originalPath);
			Write(dir, mesh, importImmediately: true);
		}

		[MenuItem("Assets/Save .Obj File", true)]
		private static bool ValidateSave()
		{
			// 選択したオブジェクトが Texture2D の場合は true を返します (そうでない場合は、メニュー項目は無効になります)
			return Selection.activeObject.GetType() == typeof(Mesh);
		}

		[MenuItem("CONTEXT/MeshFilter/Save .Obj File")]
		public static void SaveFromInspector(MenuCommand menuCommand)
		{
		    var meshFilter = menuCommand.context as MeshFilter;
			if (meshFilter != null)
			{
				var mesh = meshFilter.mesh;
				if (mesh != null)
				{
					Write("Assets", mesh, importImmediately: true);
				}
			}
		}

		public static bool Write(
			string directory,
			Mesh mesh,
			bool importImmediately = false)
		{
			Debug.Assert(mesh != null);
			bool ret = true;
			for (int i = 0; i < mesh.subMeshCount; i++)
			{
				var filename = string.Format("{0}_{1}.obj", mesh.name, i);
				var path = System.IO.Path.Combine(directory, filename);
				if (!Write(path, mesh, i, importImmediately))
				{
					ret = false;
				}
			}
			return ret;
		}

		public static bool Write(
			string path,
			Mesh mesh,
			int subMeshIndex,
			bool importImmediately = false)
		{
			var text = ToText(mesh, subMeshIndex);
			return Write(path, text, importImmediately);
		}

		public static bool Write(
			string path,
			IList<Vector3> positions,
			IList<Vector2> uvs,
			IList<Vector3> normals,
			IList<int> indices,
			bool importImmediately = false)
		{
			var text = ToText(positions, uvs, normals, indices);
			return Write(path, text, importImmediately);
		}

		static bool Write(string path, string objFileText, bool importImmediately)
		{
			bool ret = false;
			try
			{
				System.IO.File.WriteAllText(path, objFileText);
				if (importImmediately)
				{
					UnityEditor.AssetDatabase.ImportAsset(path, UnityEditor.ImportAssetOptions.Default);
				}
				ret = true;
			}
			catch (System.Exception e)
			{
				Debug.LogException(e);
			}
			return ret;
		}
#endif
	}
}